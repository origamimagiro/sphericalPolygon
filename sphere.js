// Generated by CoffeeScript 1.10.0

/*
The MIT License

Copyright (c) 2016 Jason S. Ku

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

TO DO
 */

(function() {
  var AppHandler, DOWN, EPS, LEFT, Point, RETURN, RIGHT, Rotator, TAB, UP, View;

  EPS = Math.pow(10, -13);

  TAB = 9;

  RETURN = 13;

  LEFT = 37;

  UP = 38;

  RIGHT = 39;

  DOWN = 40;

  Point = (function() {
    Point.free = 0;

    function Point(x1, y1, z1) {
      this.x = x1 != null ? x1 : 0;
      this.y = y1 != null ? y1 : 0;
      this.z = z1 != null ? z1 : 0;
      this.id = Point.free++;
    }

    Point.from_spherical = function(theta, phi) {
      this.theta = theta != null ? theta : 0;
      this.phi = phi != null ? phi : 0;
      return new Point(Math.cos(this.phi) * Math.cos(this.theta), Math.cos(this.phi) * Math.sin(this.theta), Math.sin(this.phi));
    };

    Point.prototype.add = function(v) {
      return new Point(this.x + v.x, this.y + v.y, this.z + v.z);
    };

    Point.prototype.plus = function(s) {
      return new Point(this.x + s, this.y + s, this.z + s);
    };

    Point.prototype.mul = function(s) {
      return new Point(this.x * s, this.y * s, this.z * s);
    };

    Point.prototype.div = function(s) {
      if (s !== 0) {
        return this.mul(1.0 / s);
      } else {
        return null;
      }
    };

    Point.prototype.sub = function(v) {
      return this.add(v.mul(-1));
    };

    Point.prototype.dot = function(v) {
      return (this.x * v.x) + (this.y * v.y) + (this.z * v.z);
    };

    Point.prototype.dist = function(v) {
      return Math.sqrt(this.dist_sq(v));
    };

    Point.prototype.dist_sq = function(v) {
      return this.sub(v).mag_sq();
    };

    Point.prototype.is_zero = function() {
      return this.mag() === 0;
    };

    Point.prototype.neg_y = function() {
      return new Point(this.x, -this.y, this.z);
    };

    Point.prototype.mag_sq = function() {
      return this.dot(this);
    };

    Point.prototype.mag = function() {
      return Math.sqrt(this.mag_sq());
    };

    Point.prototype.dir = function() {
      if (this.mag() > EPS) {
        return this.div(this.mag());
      }
    };

    Point.prototype.cross = function(v) {
      return new Point((this.y * v.z) - (this.z * v.y), (this.z * v.x) - (this.x * v.z), (this.x * v.y) - (this.y * v.x));
    };

    Point.prototype.angle = function(u, v) {
      u = u.sub(this).dir();
      v = v.sub(this).dir();
      return Math.acos(u.dot(v));
    };

    Point.prototype.rotate = function(axis, ang) {
      return this.mul(Math.cos(ang)).add(axis.cross(this).mul(Math.sin(ang))).add(axis.mul(this.dot(axis)).mul(1 - Math.cos(ang)));
    };

    Point.prototype.intersects = function(q, u, v) {
      var n1, n2, x;
      n1 = u.cross(v);
      n2 = this.cross(q);
      x = n1.cross(n2).dir();
      if (this.dot(x) < 0) {
        x = x.mul(-1);
      }
      return u.cross(x).dot(n1) > 0 && x.cross(v).dot(n1) > 0 && this.cross(x).dot(n2) > 0 && x.cross(q).dot(n2) > 0;
    };

    Point.outside_point = function(ps) {
      return (ps.reduce(function(a, b) {
        return a.add(b);
      })).add(Point.noise(0.01)).dir().mul(-1);
    };

    Point.prototype.is_inside = function(ps, q) {
      var count, i, k, len, p1, p2, ref;
      count = 0;
      ref = ps.slice(0, +(ps.length - 2) + 1 || 9e9);
      for (i = k = 0, len = ref.length; k < len; i = ++k) {
        p1 = ref[i];
        p2 = ps[i + 1];
        if (this.intersects(q, p1, p2)) {
          count++;
        }
      }
      return (count % 2) !== 0;
    };

    Point.noise = function(s) {
      return (new Point(Math.random(), Math.random(), Math.random())).mul(s);
    };

    Point.center = function(ps) {
      var c, k, l, len, len1, len2, max, min, o, p, ref, ref1;
      max = (new Point(1, 1, 1)).div(-EPS);
      min = (new Point(1, 1, 1)).div(EPS);
      for (k = 0, len = ps.length; k < len; k++) {
        p = ps[k];
        ref = ['x', 'y', 'z'];
        for (l = 0, len1 = ref.length; l < len1; l++) {
          c = ref[l];
          max[c] = Math.max(p[c], max[c]);
        }
        ref1 = ['x', 'y', 'z'];
        for (o = 0, len2 = ref1.length; o < len2; o++) {
          c = ref1[o];
          min[c] = Math.min(p[c], min[c]);
        }
      }
      return max.add(min).div(2);
    };

    return Point;

  })();

  View = (function() {
    function View(id) {
      this.id = id;
      this.center = null;
      this.scale = null;
      this.dx = new Point(1, 0, 0);
      this.dy = new Point(0, 1, 0);
      this.inset_factor = 0.9;
      this.view_size = 150;
      this.svg = SVG(this.id);
      this.svg.viewbox(0, 0, this.view_size, this.view_size);
    }

    View.prototype.clear = function() {
      return this.svg.clear();
    };

    View.prototype.scale_points = function(ps) {
      var k, len, p;
      this.center = Point.center(ps);
      this.scale = EPS;
      for (k = 0, len = ps.length; k < len; k++) {
        p = ps[k];
        this.scale = Math.max(this.scale, this.center.sub(p).mag());
      }
      return this.scale = this.view_size * this.inset_factor / this.scale / 2;
    };

    View.prototype.set_frame = function(dx, dz) {
      this.dx = dx;
      if (dz == null) {
        dz = this.dx.perp();
      }
      return this.dy = dz.cross(this.dx);
    };

    View.prototype.location = function(p) {
      var q;
      q = new Point(p.sub(this.center).dot(this.dx), p.sub(this.center).dot(this.dy));
      return q.mul(this.scale).neg_y().plus(0.5 * this.view_size);
    };

    View.prototype.draw_point = function(p) {
      var q;
      q = this.location(p);
      return this.svg.circle(2).center(q.x, q.y);
    };

    View.prototype.draw_point_text = function(p, label) {
      var q;
      q = this.location(p);
      return this.svg.text(label).move(q.x, q.y);
    };

    View.prototype.draw_polyline = function(ps) {
      var p, q, qs;
      qs = (function() {
        var k, len, results;
        results = [];
        for (k = 0, len = ps.length; k < len; k++) {
          p = ps[k];
          results.push(this.location(p));
        }
        return results;
      }).call(this);
      return this.svg.polyline((function() {
        var k, len, results;
        results = [];
        for (k = 0, len = qs.length; k < len; k++) {
          q = qs[k];
          results.push([q.x, q.y]);
        }
        return results;
      })());
    };

    View.prototype.draw_polygon = function(ps) {
      var p, q, qs;
      qs = (function() {
        var k, len, results;
        results = [];
        for (k = 0, len = ps.length; k < len; k++) {
          p = ps[k];
          results.push(this.location(p));
        }
        return results;
      }).call(this);
      return this.svg.polygon((function() {
        var k, len, results;
        results = [];
        for (k = 0, len = qs.length; k < len; k++) {
          q = qs[k];
          results.push([q.x, q.y]);
        }
        return results;
      })());
    };

    return View;

  })();

  Rotator = (function() {
    function Rotator(view, draw) {
      this.view = view;
      this.draw = draw;
      this.yaw = Math.PI / 3;
      this.pitch = Math.PI / 4;
      this.pitch_lim = 0.42;
      this.ang_scale = 0.002;
      this.set_frame(this.yaw, this.pitch);
      this.start = null;
      this.current = null;
      this.view.svg.on('contextmenu', function(e) {
        return e.preventDefault();
      });
      this.view.svg.on('selectstart', function(e) {
        return e.preventDefault();
      });
      this.view.svg.on('dragstart', function(e) {
        return e.preventDefault();
      });
      this.view.svg.mousedown((function(_this) {
        return function(e) {
          return _this.start_spin(e);
        };
      })(this));
      this.view.svg.mouseup((function(_this) {
        return function(e) {
          return _this.stop_spin();
        };
      })(this));
      this.view.svg.mousemove((function(_this) {
        return function(e) {
          return _this.spin(e);
        };
      })(this));
      this.view.svg.mouseout((function(_this) {
        return function(e) {
          var top;
          top = (e.target.id != null) && e.target.id === _this.view.id ? e.relatedTarget : e.target;
          while ((top != null) && (top.id !== _this.view.id) && (top.nodeName !== 'BODY')) {
            top = top.parentNode;
          }
          if ((top == null) || top.nodeName === 'BODY') {
            return _this.stop_spin();
          }
        };
      })(this));
    }

    Rotator.prototype.refresh = function() {
      this.set_frame(this.yaw, this.pitch);
      return this.draw();
    };

    Rotator.prototype.set_frame = function(yaw, pitch) {
      var dx, dz;
      dz = new Point(Math.cos(pitch) * Math.cos(yaw), Math.cos(pitch) * Math.sin(yaw), Math.sin(pitch));
      dx = dz.cross(new Point(0, 0, -1)).dir();
      return this.view.set_frame(dx, dz);
    };

    Rotator.prototype.stop_spin = function() {
      if ((this.start != null) && (this.current != null)) {
        this.yaw = this.get_yaw();
        this.pitch = this.get_pitch();
        this.refresh();
      }
      this.start = null;
      return this.current = null;
    };

    Rotator.prototype.start_spin = function(e) {
      return this.start = this.screen_pt(e);
    };

    Rotator.prototype.step_yaw = function(d) {
      return (this.yaw + d * this.ang_scale * Math.PI) % (2 * Math.PI);
    };

    Rotator.prototype.step_pitch = function(d) {
      var pitch;
      pitch = this.pitch - d * this.ang_scale * Math.PI;
      if (!(Math.abs(pitch) < this.pitch_lim * Math.PI)) {
        pitch *= this.pitch_lim * Math.PI / Math.abs(pitch);
      }
      return pitch;
    };

    Rotator.prototype.get_yaw = function() {
      return this.step_yaw(this.start.x - this.current.x);
    };

    Rotator.prototype.get_pitch = function() {
      return this.step_pitch(this.start.y - this.current.y);
    };

    Rotator.prototype.increment_yaw = function() {
      this.yaw = this.step_yaw(10);
      return this.refresh();
    };

    Rotator.prototype.decrement_yaw = function() {
      this.yaw = this.step_yaw(-10);
      return this.refresh();
    };

    Rotator.prototype.increment_pitch = function() {
      this.pitch = this.step_pitch(10);
      return this.refresh();
    };

    Rotator.prototype.decrement_pitch = function() {
      this.pitch = this.step_pitch(-10);
      return this.refresh();
    };

    Rotator.prototype.spin = function(e) {
      if (this.start != null) {
        this.current = this.screen_pt(e);
        this.set_frame(this.get_yaw(), this.get_pitch());
        return this.draw();
      }
    };

    Rotator.prototype.screen_pt = function(e) {
      var p;
      p = this.view.svg.node.createSVGPoint();
      p.x = e.clientX;
      p.y = e.clientY;
      p.matrixTransform(this.view.svg.node.getScreenCTM().inverse());
      return new Point(p.x, p.y);
    };

    return Rotator;

  })();

  AppHandler = (function() {
    var TURN_LIM, TURN_STEP;

    TURN_STEP = Math.PI / 100;

    TURN_LIM = Math.cos(TURN_STEP);

    function AppHandler() {
      var x, y, z;
      this.view = new View('view');
      this.view.scale_points((function() {
        var k, len, ref, ref1, results;
        ref = [[-1, -1], [1, 1]];
        results = [];
        for (k = 0, len = ref.length; k < len; k++) {
          ref1 = ref[k], x = ref1[0], y = ref1[1], z = ref1[2];
          results.push(new Point(x, y, z));
        }
        return results;
      })());
      this.rotator = new Rotator(this.view, (function(_this) {
        return function() {
          return _this.draw();
        };
      })(this));
      this.ps = null;
      this.p = Point.from_spherical(0, 0);
      this.q = null;
      this.set_ps();
      this.draw();
      $(document).on('keydown', (function(_this) {
        return function(e) {
          if ([UP, DOWN, LEFT, RIGHT, RETURN, TAB].indexOf(e.which) !== -1) {
            e.preventDefault();
          }
          switch (e.which) {
            case UP:
              _this.p_up();
              break;
            case DOWN:
              _this.p_down();
              break;
            case LEFT:
              _this.p_left();
              break;
            case RIGHT:
              _this.p_right();
              break;
            case RETURN:
              _this.p_evaluate();
              break;
            case TAB:
              _this.set_ps();
          }
          return _this.draw();
        };
      })(this));
    }

    AppHandler.prototype.p_up = function() {
      var n;
      if (this.p.dot(new Point(0, 0, 1)) < TURN_LIM) {
        n = this.p.cross(new Point(0, 0, 1));
        this.p = this.p.rotate(n.dir(), TURN_STEP);
        this.q = null;
        return this.p.state = 0;
      }
    };

    AppHandler.prototype.p_down = function() {
      var n;
      if (this.p.dot(new Point(0, 0, -1)) < TURN_LIM) {
        n = this.p.cross(new Point(0, 0, -1));
        this.p = this.p.rotate(n.dir(), TURN_STEP);
        this.q = null;
        return this.p.state = 0;
      }
    };

    AppHandler.prototype.p_left = function() {
      this.p = this.p.rotate(new Point(0, 0, 1), -TURN_STEP);
      this.q = null;
      return this.p.state = 0;
    };

    AppHandler.prototype.p_right = function() {
      this.p = this.p.rotate(new Point(0, 0, 1), TURN_STEP);
      this.q = null;
      return this.p.state = 0;
    };

    AppHandler.prototype.p_evaluate = function() {
      this.q = Point.outside_point(this.ps);
      return this.p.state = (this.p.is_inside(this.ps, this.q) ? 1 : 2);
    };

    AppHandler.prototype.set_ps = function() {
      var c, cs, i, j, scale;
      cs = (function() {
        var k, results;
        results = [];
        for (i = k = 1; k <= 10; i = ++k) {
          results.push((function() {
            var l, len, ref, results1;
            ref = [0, 1];
            results1 = [];
            for (l = 0, len = ref.length; l < len; l++) {
              j = ref[l];
              results1.push(Math.PI * (Math.random() - 0.5));
            }
            return results1;
          })());
        }
        return results;
      })();
      cs = cs.concat([cs[0]]);
      scale = 0.6;
      this.ps = (function() {
        var k, len, results;
        results = [];
        for (k = 0, len = cs.length; k < len; k++) {
          c = cs[k];
          results.push(Point.from_spherical(c[0] * scale, c[1] * scale));
        }
        return results;
      })();
      this.q = null;
      return this.p.state = 0;
    };

    AppHandler.prototype.draw = function() {
      this.view.clear();
      this.draw_sphere();
      this.draw_great_arc_chain(this.ps).fill('none').stroke({
        width: 0.4
      });
      if (this.q != null) {
        this.draw_great_arc_chain([this.p, this.q]).fill('none').stroke({
          width: 0.4,
          color: 'cyan'
        });
      }
      return this.draw_point(this.p).fill((function() {
        switch (this.p.state) {
          case 0:
            return 'black';
          case 1:
            return 'lightgreen';
          case 2:
            return 'orangered';
        }
      }).call(this));
    };

    AppHandler.prototype.great_arc = function(a, b, option) {
      var ang, i, m, n;
      if (option == null) {
        option = 0;
      }
      ang = (option === 2 ? 2 * Math.PI : Math.acos(a.dot(b)) - (option === 0 ? 0 : 2 * Math.PI));
      n = a.cross(b).dir();
      m = Math.ceil(ang / Math.PI * 40);
      return (function() {
        var k, ref, results;
        results = [];
        for (i = k = 0, ref = m; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
          results.push(a.rotate(n, ang * i / m));
        }
        return results;
      })();
    };

    AppHandler.prototype.draw_great_arc_chain = function(ps, option) {
      var i;
      if (option == null) {
        option = 0;
      }
      return this.view.draw_polyline(((function() {
        var k, ref, results;
        results = [];
        for (i = k = 0, ref = ps.length - 2; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
          results.push(this.great_arc(ps[i], ps[i + 1], option));
        }
        return results;
      }).call(this)).reduce(function(a, b) {
        return a.concat(b);
      })).stroke({
        color: 'black',
        linecap: 'round',
        linejoin: 'round',
        width: 0.2
      }).fill('none');
    };

    AppHandler.prototype.draw_sphere = function() {
      var sphere_path, x, y, z;
      sphere_path = [[1, 0, 0], [0, -1, 0], [0, 0, -1], [1, 0, 0], [0, 1, 0], [0, 0, -1], [-1, 0, 0], [0, 1, 0], [0, 0, 1], [-1, 0, 0], [0, -1, 0], [0, 0, 1], [1, 0, 0]];
      return this.draw_great_arc_chain((function() {
        var k, len, ref, results;
        results = [];
        for (k = 0, len = sphere_path.length; k < len; k++) {
          ref = sphere_path[k], x = ref[0], y = ref[1], z = ref[2];
          results.push(new Point(x, y, z));
        }
        return results;
      })()).stroke({
        color: 'gray'
      });
    };

    AppHandler.prototype.draw_point = function(p) {
      return this.view.draw_point(p).fill('black').stroke('none');
    };

    return AppHandler;

  })();

  if (typeof window !== "undefined" && window !== null) {
    window.onload = function() {
      var app_handler;
      app_handler = new AppHandler();
    };
  }

}).call(this);
